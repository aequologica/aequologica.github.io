// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    var BackboneSyncSuper, Item, ItemView, List, ListView, list_view, _ref, _ref1, _ref2, _ref3;

    BackboneSyncSuper = Backbone.sync;
    Backbone.sync = function(method, model, options) {
      console.log("I've been passed " + method + " with " + JSON.stringify(model) + " and options " + JSON.stringify(options));
      return BackboneSyncSuper(method, model, options);
    };
    Item = (function(_super) {
      __extends(Item, _super);

      function Item() {
        _ref = Item.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Item.prototype.defaults = {
        part1: 'Hello',
        part2: 'Backbone'
      };

      return Item;

    })(Backbone.Model);
    List = (function(_super) {
      __extends(List, _super);

      function List() {
        _ref1 = List.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      List.prototype.model = Item;

      List.prototype.localStorage = new Backbone.LocalStorage("items");

      return List;

    })(Backbone.Collection);
    ItemView = (function(_super) {
      __extends(ItemView, _super);

      function ItemView() {
        this.unrender = __bind(this.unrender, this);        _ref2 = ItemView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      ItemView.prototype.tagName = 'li';

      ItemView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind('change', this.render);
        return this.model.bind('remove', this.unrender);
      };

      ItemView.prototype.render = function() {
        $(this.el).html("<span>" + (this.model.get('part1')) + " " + (this.model.get('part2')) + "!</span>\n<button class=\"swap\">swap</button>\n<button class=\"delete\">delete</button>");
        return this;
      };

      ItemView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      ItemView.prototype.swap = function() {
        return this.model.set({
          part1: this.model.get('part2'),
          part2: this.model.get('part1')
        });
      };

      ItemView.prototype.remove = function() {
        return this.model.destroy();
      };

      ItemView.prototype.events = {
        'click .swap': 'swap',
        'click .delete': 'remove'
      };

      return ItemView;

    })(Backbone.View);
    ListView = (function(_super) {
      var self;

      __extends(ListView, _super);

      function ListView() {
        _ref3 = ListView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      ListView.prototype.el = $('#coffeescript-meet-backbonejs');

      self = ListView;

      ListView.prototype.initialize = function() {
        _.bindAll(this);
        this.counter = 0;
        this.collection = new List;
        this.collection.bind('add', this.appendItem);
        return this.render();
      };

      ListView.prototype.render = function() {
        $(this.el).append('<button id="add">Add List Item</button>');
        return $(this.el).append('<ol></ol>');
      };

      ListView.prototype.addItem = function() {
        var item;

        this.counter++;
        item = new Item;
        item.set({
          part2: "" + (item.get('part2')) + " " + this.counter
        });
        return this.collection.create(item);
      };

      ListView.prototype.appendItem = function(item) {
        var item_view;

        item_view = new ItemView({
          model: item
        });
        return $('ol').append(item_view.render().el);
      };

      ListView.prototype.events = {
        'click #add': 'addItem',
        'click #save': 'save'
      };

      return ListView;

    })(Backbone.View);
    list_view = new ListView;
    return list_view.collection.fetch({
      success: function(model, response) {
        return console.log(JSON.stringify(model));
      }
    });
  });

}).call(this);
